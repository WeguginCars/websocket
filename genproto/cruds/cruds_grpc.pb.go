// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: cruds/cruds.proto

package cruds

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CrudsService_CreateCar_FullMethodName                     = "/cruds.CrudsService/CreateCar"
	CrudsService_GetCarById_FullMethodName                    = "/cruds.CrudsService/GetCarById"
	CrudsService_ListCars_FullMethodName                      = "/cruds.CrudsService/ListCars"
	CrudsService_UpdateCar_FullMethodName                     = "/cruds.CrudsService/UpdateCar"
	CrudsService_DeleteCar_FullMethodName                     = "/cruds.CrudsService/DeleteCar"
	CrudsService_IncrementCarReviewCount_FullMethodName       = "/cruds.CrudsService/IncrementCarReviewCount"
	CrudsService_SearchCar_FullMethodName                     = "/cruds.CrudsService/SearchCar"
	CrudsService_CheckCarOwnership_FullMethodName             = "/cruds.CrudsService/CheckCarOwnership"
	CrudsService_SaveCar_FullMethodName                       = "/cruds.CrudsService/SaveCar"
	CrudsService_GetSavedCarsByUser_FullMethodName            = "/cruds.CrudsService/GetSavedCarsByUser"
	CrudsService_DeleteSavedCar_FullMethodName                = "/cruds.CrudsService/DeleteSavedCar"
	CrudsService_DeleteSavedCarsByCarId_FullMethodName        = "/cruds.CrudsService/DeleteSavedCarsByCarId"
	CrudsService_CheckSavedCarOwnership_FullMethodName        = "/cruds.CrudsService/CheckSavedCarOwnership"
	CrudsService_CreateNotification_FullMethodName            = "/cruds.CrudsService/CreateNotification"
	CrudsService_GetAllNotificationsByUserId_FullMethodName   = "/cruds.CrudsService/GetAllNotificationsByUserId"
	CrudsService_GetUnreadNotifications_FullMethodName        = "/cruds.CrudsService/GetUnreadNotifications"
	CrudsService_MarkNotificationAsRead_FullMethodName        = "/cruds.CrudsService/MarkNotificationAsRead"
	CrudsService_DeleteNotification_FullMethodName            = "/cruds.CrudsService/DeleteNotification"
	CrudsService_SendMessage_FullMethodName                   = "/cruds.CrudsService/SendMessage"
	CrudsService_GetMessagesByUser_FullMethodName             = "/cruds.CrudsService/GetMessagesByUser"
	CrudsService_MarkMessageAsRead_FullMethodName             = "/cruds.CrudsService/MarkMessageAsRead"
	CrudsService_DeleteMessage_FullMethodName                 = "/cruds.CrudsService/DeleteMessage"
	CrudsService_CheckMessageOwnership_FullMethodName         = "/cruds.CrudsService/CheckMessageOwnership"
	CrudsService_GetMessageByUserAndId_FullMethodName         = "/cruds.CrudsService/GetMessageByUserAndId"
	CrudsService_RegisterNotificationToken_FullMethodName     = "/cruds.CrudsService/RegisterNotificationToken"
	CrudsService_GetNotificationTokensByUserId_FullMethodName = "/cruds.CrudsService/GetNotificationTokensByUserId"
	CrudsService_DeleteNotificationToken_FullMethodName       = "/cruds.CrudsService/DeleteNotificationToken"
	CrudsService_AddImage_FullMethodName                      = "/cruds.CrudsService/AddImage"
	CrudsService_GetImagesByCar_FullMethodName                = "/cruds.CrudsService/GetImagesByCar"
	CrudsService_DeleteImage_FullMethodName                   = "/cruds.CrudsService/DeleteImage"
	CrudsService_DeleteImagesByCarId_FullMethodName           = "/cruds.CrudsService/DeleteImagesByCarId"
	CrudsService_GetImageByID_FullMethodName                  = "/cruds.CrudsService/GetImageByID"
	CrudsService_CreateComment_FullMethodName                 = "/cruds.CrudsService/CreateComment"
	CrudsService_GetCommentsByCar_FullMethodName              = "/cruds.CrudsService/GetCommentsByCar"
	CrudsService_UpdateComment_FullMethodName                 = "/cruds.CrudsService/UpdateComment"
	CrudsService_DeleteComment_FullMethodName                 = "/cruds.CrudsService/DeleteComment"
	CrudsService_DeleteCommentsByCarId_FullMethodName         = "/cruds.CrudsService/DeleteCommentsByCarId"
	CrudsService_CheckCommentOwnership_FullMethodName         = "/cruds.CrudsService/CheckCommentOwnership"
)

// CrudsServiceClient is the client API for CrudsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrudsServiceClient interface {
	// Cars
	CreateCar(ctx context.Context, in *CreateCarRequest, opts ...grpc.CallOption) (*Car, error)
	GetCarById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Car, error)
	ListCars(ctx context.Context, in *ListCarsRequest, opts ...grpc.CallOption) (*ListCarsResponse, error)
	UpdateCar(ctx context.Context, in *UpdateCarRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteCar(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	IncrementCarReviewCount(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	SearchCar(ctx context.Context, in *SearchCarRequest, opts ...grpc.CallOption) (*ListCarsResponse, error)
	CheckCarOwnership(ctx context.Context, in *BoolCheckCar, opts ...grpc.CallOption) (*BoolCheck, error)
	// Saved Cars
	SaveCar(ctx context.Context, in *SaveCarRequest, opts ...grpc.CallOption) (*Empty, error)
	GetSavedCarsByUser(ctx context.Context, in *GetSavedCarsRequest, opts ...grpc.CallOption) (*ListSavedCarsResponse, error)
	DeleteSavedCar(ctx context.Context, in *DeleteSavedCarRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteSavedCarsByCarId(ctx context.Context, in *CarId, opts ...grpc.CallOption) (*Empty, error)
	CheckSavedCarOwnership(ctx context.Context, in *BoolCheckSavedCars, opts ...grpc.CallOption) (*BoolCheck, error)
	// Notifications
	CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*Empty, error)
	GetAllNotificationsByUserId(ctx context.Context, in *GetUnreadNotificationsRequest, opts ...grpc.CallOption) (*ListNotificationsResponse, error)
	GetUnreadNotifications(ctx context.Context, in *GetUnreadNotificationsRequest, opts ...grpc.CallOption) (*ListNotificationsResponse, error)
	MarkNotificationAsRead(ctx context.Context, in *MarkNotificationAsReadRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, opts ...grpc.CallOption) (*Empty, error)
	// Messages
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*Message, error)
	GetMessagesByUser(ctx context.Context, in *GetMessagesByUserRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	MarkMessageAsRead(ctx context.Context, in *MessageId, opts ...grpc.CallOption) (*Empty, error)
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*Empty, error)
	CheckMessageOwnership(ctx context.Context, in *BoolCheckMessage, opts ...grpc.CallOption) (*BoolCheck, error)
	GetMessageByUserAndId(ctx context.Context, in *GetMessageByUserAndIdReq, opts ...grpc.CallOption) (*GetMessageByUserAndIdRes, error)
	// Notification Tokens
	RegisterNotificationToken(ctx context.Context, in *RegisterNotificationTokenRequest, opts ...grpc.CallOption) (*Empty, error)
	GetNotificationTokensByUserId(ctx context.Context, in *GetNotificationTokensByUserIdRequest, opts ...grpc.CallOption) (*ListNotificationTokensResponse, error)
	DeleteNotificationToken(ctx context.Context, in *DeleteNotificationTokenRequest, opts ...grpc.CallOption) (*Empty, error)
	// Images
	AddImage(ctx context.Context, in *AddImageRequest, opts ...grpc.CallOption) (*Image, error)
	GetImagesByCar(ctx context.Context, in *CarId, opts ...grpc.CallOption) (*ListImagesResponse, error)
	DeleteImage(ctx context.Context, in *ImageId, opts ...grpc.CallOption) (*Empty, error)
	DeleteImagesByCarId(ctx context.Context, in *CarId, opts ...grpc.CallOption) (*Empty, error)
	GetImageByID(ctx context.Context, in *ImageId, opts ...grpc.CallOption) (*Image, error)
	// Comments
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*Comment, error)
	GetCommentsByCar(ctx context.Context, in *CarId, opts ...grpc.CallOption) (*ListCommentsResponse, error)
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteComment(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*Empty, error)
	DeleteCommentsByCarId(ctx context.Context, in *CarId, opts ...grpc.CallOption) (*Empty, error)
	CheckCommentOwnership(ctx context.Context, in *BoolCheckComment, opts ...grpc.CallOption) (*BoolCheck, error)
}

type crudsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCrudsServiceClient(cc grpc.ClientConnInterface) CrudsServiceClient {
	return &crudsServiceClient{cc}
}

func (c *crudsServiceClient) CreateCar(ctx context.Context, in *CreateCarRequest, opts ...grpc.CallOption) (*Car, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Car)
	err := c.cc.Invoke(ctx, CrudsService_CreateCar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) GetCarById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Car, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Car)
	err := c.cc.Invoke(ctx, CrudsService_GetCarById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) ListCars(ctx context.Context, in *ListCarsRequest, opts ...grpc.CallOption) (*ListCarsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCarsResponse)
	err := c.cc.Invoke(ctx, CrudsService_ListCars_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) UpdateCar(ctx context.Context, in *UpdateCarRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CrudsService_UpdateCar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) DeleteCar(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CrudsService_DeleteCar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) IncrementCarReviewCount(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CrudsService_IncrementCarReviewCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) SearchCar(ctx context.Context, in *SearchCarRequest, opts ...grpc.CallOption) (*ListCarsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCarsResponse)
	err := c.cc.Invoke(ctx, CrudsService_SearchCar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) CheckCarOwnership(ctx context.Context, in *BoolCheckCar, opts ...grpc.CallOption) (*BoolCheck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolCheck)
	err := c.cc.Invoke(ctx, CrudsService_CheckCarOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) SaveCar(ctx context.Context, in *SaveCarRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CrudsService_SaveCar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) GetSavedCarsByUser(ctx context.Context, in *GetSavedCarsRequest, opts ...grpc.CallOption) (*ListSavedCarsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSavedCarsResponse)
	err := c.cc.Invoke(ctx, CrudsService_GetSavedCarsByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) DeleteSavedCar(ctx context.Context, in *DeleteSavedCarRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CrudsService_DeleteSavedCar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) DeleteSavedCarsByCarId(ctx context.Context, in *CarId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CrudsService_DeleteSavedCarsByCarId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) CheckSavedCarOwnership(ctx context.Context, in *BoolCheckSavedCars, opts ...grpc.CallOption) (*BoolCheck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolCheck)
	err := c.cc.Invoke(ctx, CrudsService_CheckSavedCarOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CrudsService_CreateNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) GetAllNotificationsByUserId(ctx context.Context, in *GetUnreadNotificationsRequest, opts ...grpc.CallOption) (*ListNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNotificationsResponse)
	err := c.cc.Invoke(ctx, CrudsService_GetAllNotificationsByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) GetUnreadNotifications(ctx context.Context, in *GetUnreadNotificationsRequest, opts ...grpc.CallOption) (*ListNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNotificationsResponse)
	err := c.cc.Invoke(ctx, CrudsService_GetUnreadNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) MarkNotificationAsRead(ctx context.Context, in *MarkNotificationAsReadRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CrudsService_MarkNotificationAsRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CrudsService_DeleteNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, CrudsService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) GetMessagesByUser(ctx context.Context, in *GetMessagesByUserRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, CrudsService_GetMessagesByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) MarkMessageAsRead(ctx context.Context, in *MessageId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CrudsService_MarkMessageAsRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CrudsService_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) CheckMessageOwnership(ctx context.Context, in *BoolCheckMessage, opts ...grpc.CallOption) (*BoolCheck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolCheck)
	err := c.cc.Invoke(ctx, CrudsService_CheckMessageOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) GetMessageByUserAndId(ctx context.Context, in *GetMessageByUserAndIdReq, opts ...grpc.CallOption) (*GetMessageByUserAndIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessageByUserAndIdRes)
	err := c.cc.Invoke(ctx, CrudsService_GetMessageByUserAndId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) RegisterNotificationToken(ctx context.Context, in *RegisterNotificationTokenRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CrudsService_RegisterNotificationToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) GetNotificationTokensByUserId(ctx context.Context, in *GetNotificationTokensByUserIdRequest, opts ...grpc.CallOption) (*ListNotificationTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNotificationTokensResponse)
	err := c.cc.Invoke(ctx, CrudsService_GetNotificationTokensByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) DeleteNotificationToken(ctx context.Context, in *DeleteNotificationTokenRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CrudsService_DeleteNotificationToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) AddImage(ctx context.Context, in *AddImageRequest, opts ...grpc.CallOption) (*Image, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Image)
	err := c.cc.Invoke(ctx, CrudsService_AddImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) GetImagesByCar(ctx context.Context, in *CarId, opts ...grpc.CallOption) (*ListImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListImagesResponse)
	err := c.cc.Invoke(ctx, CrudsService_GetImagesByCar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) DeleteImage(ctx context.Context, in *ImageId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CrudsService_DeleteImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) DeleteImagesByCarId(ctx context.Context, in *CarId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CrudsService_DeleteImagesByCarId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) GetImageByID(ctx context.Context, in *ImageId, opts ...grpc.CallOption) (*Image, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Image)
	err := c.cc.Invoke(ctx, CrudsService_GetImageByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*Comment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Comment)
	err := c.cc.Invoke(ctx, CrudsService_CreateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) GetCommentsByCar(ctx context.Context, in *CarId, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommentsResponse)
	err := c.cc.Invoke(ctx, CrudsService_GetCommentsByCar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CrudsService_UpdateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) DeleteComment(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CrudsService_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) DeleteCommentsByCarId(ctx context.Context, in *CarId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CrudsService_DeleteCommentsByCarId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudsServiceClient) CheckCommentOwnership(ctx context.Context, in *BoolCheckComment, opts ...grpc.CallOption) (*BoolCheck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolCheck)
	err := c.cc.Invoke(ctx, CrudsService_CheckCommentOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrudsServiceServer is the server API for CrudsService service.
// All implementations must embed UnimplementedCrudsServiceServer
// for forward compatibility.
type CrudsServiceServer interface {
	// Cars
	CreateCar(context.Context, *CreateCarRequest) (*Car, error)
	GetCarById(context.Context, *Id) (*Car, error)
	ListCars(context.Context, *ListCarsRequest) (*ListCarsResponse, error)
	UpdateCar(context.Context, *UpdateCarRequest) (*Empty, error)
	DeleteCar(context.Context, *Id) (*Empty, error)
	IncrementCarReviewCount(context.Context, *Id) (*Empty, error)
	SearchCar(context.Context, *SearchCarRequest) (*ListCarsResponse, error)
	CheckCarOwnership(context.Context, *BoolCheckCar) (*BoolCheck, error)
	// Saved Cars
	SaveCar(context.Context, *SaveCarRequest) (*Empty, error)
	GetSavedCarsByUser(context.Context, *GetSavedCarsRequest) (*ListSavedCarsResponse, error)
	DeleteSavedCar(context.Context, *DeleteSavedCarRequest) (*Empty, error)
	DeleteSavedCarsByCarId(context.Context, *CarId) (*Empty, error)
	CheckSavedCarOwnership(context.Context, *BoolCheckSavedCars) (*BoolCheck, error)
	// Notifications
	CreateNotification(context.Context, *CreateNotificationRequest) (*Empty, error)
	GetAllNotificationsByUserId(context.Context, *GetUnreadNotificationsRequest) (*ListNotificationsResponse, error)
	GetUnreadNotifications(context.Context, *GetUnreadNotificationsRequest) (*ListNotificationsResponse, error)
	MarkNotificationAsRead(context.Context, *MarkNotificationAsReadRequest) (*Empty, error)
	DeleteNotification(context.Context, *DeleteNotificationRequest) (*Empty, error)
	// Messages
	SendMessage(context.Context, *SendMessageRequest) (*Message, error)
	GetMessagesByUser(context.Context, *GetMessagesByUserRequest) (*ListMessagesResponse, error)
	MarkMessageAsRead(context.Context, *MessageId) (*Empty, error)
	DeleteMessage(context.Context, *DeleteMessageRequest) (*Empty, error)
	CheckMessageOwnership(context.Context, *BoolCheckMessage) (*BoolCheck, error)
	GetMessageByUserAndId(context.Context, *GetMessageByUserAndIdReq) (*GetMessageByUserAndIdRes, error)
	// Notification Tokens
	RegisterNotificationToken(context.Context, *RegisterNotificationTokenRequest) (*Empty, error)
	GetNotificationTokensByUserId(context.Context, *GetNotificationTokensByUserIdRequest) (*ListNotificationTokensResponse, error)
	DeleteNotificationToken(context.Context, *DeleteNotificationTokenRequest) (*Empty, error)
	// Images
	AddImage(context.Context, *AddImageRequest) (*Image, error)
	GetImagesByCar(context.Context, *CarId) (*ListImagesResponse, error)
	DeleteImage(context.Context, *ImageId) (*Empty, error)
	DeleteImagesByCarId(context.Context, *CarId) (*Empty, error)
	GetImageByID(context.Context, *ImageId) (*Image, error)
	// Comments
	CreateComment(context.Context, *CreateCommentRequest) (*Comment, error)
	GetCommentsByCar(context.Context, *CarId) (*ListCommentsResponse, error)
	UpdateComment(context.Context, *UpdateCommentRequest) (*Empty, error)
	DeleteComment(context.Context, *CommentId) (*Empty, error)
	DeleteCommentsByCarId(context.Context, *CarId) (*Empty, error)
	CheckCommentOwnership(context.Context, *BoolCheckComment) (*BoolCheck, error)
	mustEmbedUnimplementedCrudsServiceServer()
}

// UnimplementedCrudsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCrudsServiceServer struct{}

func (UnimplementedCrudsServiceServer) CreateCar(context.Context, *CreateCarRequest) (*Car, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCar not implemented")
}
func (UnimplementedCrudsServiceServer) GetCarById(context.Context, *Id) (*Car, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarById not implemented")
}
func (UnimplementedCrudsServiceServer) ListCars(context.Context, *ListCarsRequest) (*ListCarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCars not implemented")
}
func (UnimplementedCrudsServiceServer) UpdateCar(context.Context, *UpdateCarRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCar not implemented")
}
func (UnimplementedCrudsServiceServer) DeleteCar(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCar not implemented")
}
func (UnimplementedCrudsServiceServer) IncrementCarReviewCount(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementCarReviewCount not implemented")
}
func (UnimplementedCrudsServiceServer) SearchCar(context.Context, *SearchCarRequest) (*ListCarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCar not implemented")
}
func (UnimplementedCrudsServiceServer) CheckCarOwnership(context.Context, *BoolCheckCar) (*BoolCheck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCarOwnership not implemented")
}
func (UnimplementedCrudsServiceServer) SaveCar(context.Context, *SaveCarRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCar not implemented")
}
func (UnimplementedCrudsServiceServer) GetSavedCarsByUser(context.Context, *GetSavedCarsRequest) (*ListSavedCarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSavedCarsByUser not implemented")
}
func (UnimplementedCrudsServiceServer) DeleteSavedCar(context.Context, *DeleteSavedCarRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSavedCar not implemented")
}
func (UnimplementedCrudsServiceServer) DeleteSavedCarsByCarId(context.Context, *CarId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSavedCarsByCarId not implemented")
}
func (UnimplementedCrudsServiceServer) CheckSavedCarOwnership(context.Context, *BoolCheckSavedCars) (*BoolCheck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSavedCarOwnership not implemented")
}
func (UnimplementedCrudsServiceServer) CreateNotification(context.Context, *CreateNotificationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotification not implemented")
}
func (UnimplementedCrudsServiceServer) GetAllNotificationsByUserId(context.Context, *GetUnreadNotificationsRequest) (*ListNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNotificationsByUserId not implemented")
}
func (UnimplementedCrudsServiceServer) GetUnreadNotifications(context.Context, *GetUnreadNotificationsRequest) (*ListNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnreadNotifications not implemented")
}
func (UnimplementedCrudsServiceServer) MarkNotificationAsRead(context.Context, *MarkNotificationAsReadRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkNotificationAsRead not implemented")
}
func (UnimplementedCrudsServiceServer) DeleteNotification(context.Context, *DeleteNotificationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotification not implemented")
}
func (UnimplementedCrudsServiceServer) SendMessage(context.Context, *SendMessageRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedCrudsServiceServer) GetMessagesByUser(context.Context, *GetMessagesByUserRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesByUser not implemented")
}
func (UnimplementedCrudsServiceServer) MarkMessageAsRead(context.Context, *MessageId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkMessageAsRead not implemented")
}
func (UnimplementedCrudsServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedCrudsServiceServer) CheckMessageOwnership(context.Context, *BoolCheckMessage) (*BoolCheck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMessageOwnership not implemented")
}
func (UnimplementedCrudsServiceServer) GetMessageByUserAndId(context.Context, *GetMessageByUserAndIdReq) (*GetMessageByUserAndIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageByUserAndId not implemented")
}
func (UnimplementedCrudsServiceServer) RegisterNotificationToken(context.Context, *RegisterNotificationTokenRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNotificationToken not implemented")
}
func (UnimplementedCrudsServiceServer) GetNotificationTokensByUserId(context.Context, *GetNotificationTokensByUserIdRequest) (*ListNotificationTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationTokensByUserId not implemented")
}
func (UnimplementedCrudsServiceServer) DeleteNotificationToken(context.Context, *DeleteNotificationTokenRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotificationToken not implemented")
}
func (UnimplementedCrudsServiceServer) AddImage(context.Context, *AddImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddImage not implemented")
}
func (UnimplementedCrudsServiceServer) GetImagesByCar(context.Context, *CarId) (*ListImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImagesByCar not implemented")
}
func (UnimplementedCrudsServiceServer) DeleteImage(context.Context, *ImageId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (UnimplementedCrudsServiceServer) DeleteImagesByCarId(context.Context, *CarId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImagesByCarId not implemented")
}
func (UnimplementedCrudsServiceServer) GetImageByID(context.Context, *ImageId) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageByID not implemented")
}
func (UnimplementedCrudsServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedCrudsServiceServer) GetCommentsByCar(context.Context, *CarId) (*ListCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsByCar not implemented")
}
func (UnimplementedCrudsServiceServer) UpdateComment(context.Context, *UpdateCommentRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedCrudsServiceServer) DeleteComment(context.Context, *CommentId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCrudsServiceServer) DeleteCommentsByCarId(context.Context, *CarId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentsByCarId not implemented")
}
func (UnimplementedCrudsServiceServer) CheckCommentOwnership(context.Context, *BoolCheckComment) (*BoolCheck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCommentOwnership not implemented")
}
func (UnimplementedCrudsServiceServer) mustEmbedUnimplementedCrudsServiceServer() {}
func (UnimplementedCrudsServiceServer) testEmbeddedByValue()                      {}

// UnsafeCrudsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrudsServiceServer will
// result in compilation errors.
type UnsafeCrudsServiceServer interface {
	mustEmbedUnimplementedCrudsServiceServer()
}

func RegisterCrudsServiceServer(s grpc.ServiceRegistrar, srv CrudsServiceServer) {
	// If the following call pancis, it indicates UnimplementedCrudsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CrudsService_ServiceDesc, srv)
}

func _CrudsService_CreateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).CreateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_CreateCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).CreateCar(ctx, req.(*CreateCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_GetCarById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).GetCarById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_GetCarById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).GetCarById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_ListCars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).ListCars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_ListCars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).ListCars(ctx, req.(*ListCarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_UpdateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).UpdateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_UpdateCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).UpdateCar(ctx, req.(*UpdateCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_DeleteCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).DeleteCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_DeleteCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).DeleteCar(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_IncrementCarReviewCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).IncrementCarReviewCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_IncrementCarReviewCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).IncrementCarReviewCount(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_SearchCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).SearchCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_SearchCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).SearchCar(ctx, req.(*SearchCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_CheckCarOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoolCheckCar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).CheckCarOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_CheckCarOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).CheckCarOwnership(ctx, req.(*BoolCheckCar))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_SaveCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).SaveCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_SaveCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).SaveCar(ctx, req.(*SaveCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_GetSavedCarsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSavedCarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).GetSavedCarsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_GetSavedCarsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).GetSavedCarsByUser(ctx, req.(*GetSavedCarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_DeleteSavedCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSavedCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).DeleteSavedCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_DeleteSavedCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).DeleteSavedCar(ctx, req.(*DeleteSavedCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_DeleteSavedCarsByCarId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).DeleteSavedCarsByCarId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_DeleteSavedCarsByCarId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).DeleteSavedCarsByCarId(ctx, req.(*CarId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_CheckSavedCarOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoolCheckSavedCars)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).CheckSavedCarOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_CheckSavedCarOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).CheckSavedCarOwnership(ctx, req.(*BoolCheckSavedCars))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_CreateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).CreateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_CreateNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).CreateNotification(ctx, req.(*CreateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_GetAllNotificationsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnreadNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).GetAllNotificationsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_GetAllNotificationsByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).GetAllNotificationsByUserId(ctx, req.(*GetUnreadNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_GetUnreadNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnreadNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).GetUnreadNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_GetUnreadNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).GetUnreadNotifications(ctx, req.(*GetUnreadNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_MarkNotificationAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkNotificationAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).MarkNotificationAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_MarkNotificationAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).MarkNotificationAsRead(ctx, req.(*MarkNotificationAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_DeleteNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).DeleteNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_DeleteNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).DeleteNotification(ctx, req.(*DeleteNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_GetMessagesByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).GetMessagesByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_GetMessagesByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).GetMessagesByUser(ctx, req.(*GetMessagesByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_MarkMessageAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).MarkMessageAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_MarkMessageAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).MarkMessageAsRead(ctx, req.(*MessageId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_CheckMessageOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoolCheckMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).CheckMessageOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_CheckMessageOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).CheckMessageOwnership(ctx, req.(*BoolCheckMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_GetMessageByUserAndId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageByUserAndIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).GetMessageByUserAndId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_GetMessageByUserAndId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).GetMessageByUserAndId(ctx, req.(*GetMessageByUserAndIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_RegisterNotificationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNotificationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).RegisterNotificationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_RegisterNotificationToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).RegisterNotificationToken(ctx, req.(*RegisterNotificationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_GetNotificationTokensByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationTokensByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).GetNotificationTokensByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_GetNotificationTokensByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).GetNotificationTokensByUserId(ctx, req.(*GetNotificationTokensByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_DeleteNotificationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).DeleteNotificationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_DeleteNotificationToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).DeleteNotificationToken(ctx, req.(*DeleteNotificationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_AddImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).AddImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_AddImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).AddImage(ctx, req.(*AddImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_GetImagesByCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).GetImagesByCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_GetImagesByCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).GetImagesByCar(ctx, req.(*CarId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_DeleteImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).DeleteImage(ctx, req.(*ImageId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_DeleteImagesByCarId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).DeleteImagesByCarId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_DeleteImagesByCarId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).DeleteImagesByCarId(ctx, req.(*CarId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_GetImageByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).GetImageByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_GetImageByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).GetImageByID(ctx, req.(*ImageId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_GetCommentsByCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).GetCommentsByCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_GetCommentsByCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).GetCommentsByCar(ctx, req.(*CarId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).DeleteComment(ctx, req.(*CommentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_DeleteCommentsByCarId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).DeleteCommentsByCarId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_DeleteCommentsByCarId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).DeleteCommentsByCarId(ctx, req.(*CarId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudsService_CheckCommentOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoolCheckComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudsServiceServer).CheckCommentOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudsService_CheckCommentOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudsServiceServer).CheckCommentOwnership(ctx, req.(*BoolCheckComment))
	}
	return interceptor(ctx, in, info, handler)
}

// CrudsService_ServiceDesc is the grpc.ServiceDesc for CrudsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrudsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cruds.CrudsService",
	HandlerType: (*CrudsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCar",
			Handler:    _CrudsService_CreateCar_Handler,
		},
		{
			MethodName: "GetCarById",
			Handler:    _CrudsService_GetCarById_Handler,
		},
		{
			MethodName: "ListCars",
			Handler:    _CrudsService_ListCars_Handler,
		},
		{
			MethodName: "UpdateCar",
			Handler:    _CrudsService_UpdateCar_Handler,
		},
		{
			MethodName: "DeleteCar",
			Handler:    _CrudsService_DeleteCar_Handler,
		},
		{
			MethodName: "IncrementCarReviewCount",
			Handler:    _CrudsService_IncrementCarReviewCount_Handler,
		},
		{
			MethodName: "SearchCar",
			Handler:    _CrudsService_SearchCar_Handler,
		},
		{
			MethodName: "CheckCarOwnership",
			Handler:    _CrudsService_CheckCarOwnership_Handler,
		},
		{
			MethodName: "SaveCar",
			Handler:    _CrudsService_SaveCar_Handler,
		},
		{
			MethodName: "GetSavedCarsByUser",
			Handler:    _CrudsService_GetSavedCarsByUser_Handler,
		},
		{
			MethodName: "DeleteSavedCar",
			Handler:    _CrudsService_DeleteSavedCar_Handler,
		},
		{
			MethodName: "DeleteSavedCarsByCarId",
			Handler:    _CrudsService_DeleteSavedCarsByCarId_Handler,
		},
		{
			MethodName: "CheckSavedCarOwnership",
			Handler:    _CrudsService_CheckSavedCarOwnership_Handler,
		},
		{
			MethodName: "CreateNotification",
			Handler:    _CrudsService_CreateNotification_Handler,
		},
		{
			MethodName: "GetAllNotificationsByUserId",
			Handler:    _CrudsService_GetAllNotificationsByUserId_Handler,
		},
		{
			MethodName: "GetUnreadNotifications",
			Handler:    _CrudsService_GetUnreadNotifications_Handler,
		},
		{
			MethodName: "MarkNotificationAsRead",
			Handler:    _CrudsService_MarkNotificationAsRead_Handler,
		},
		{
			MethodName: "DeleteNotification",
			Handler:    _CrudsService_DeleteNotification_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _CrudsService_SendMessage_Handler,
		},
		{
			MethodName: "GetMessagesByUser",
			Handler:    _CrudsService_GetMessagesByUser_Handler,
		},
		{
			MethodName: "MarkMessageAsRead",
			Handler:    _CrudsService_MarkMessageAsRead_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _CrudsService_DeleteMessage_Handler,
		},
		{
			MethodName: "CheckMessageOwnership",
			Handler:    _CrudsService_CheckMessageOwnership_Handler,
		},
		{
			MethodName: "GetMessageByUserAndId",
			Handler:    _CrudsService_GetMessageByUserAndId_Handler,
		},
		{
			MethodName: "RegisterNotificationToken",
			Handler:    _CrudsService_RegisterNotificationToken_Handler,
		},
		{
			MethodName: "GetNotificationTokensByUserId",
			Handler:    _CrudsService_GetNotificationTokensByUserId_Handler,
		},
		{
			MethodName: "DeleteNotificationToken",
			Handler:    _CrudsService_DeleteNotificationToken_Handler,
		},
		{
			MethodName: "AddImage",
			Handler:    _CrudsService_AddImage_Handler,
		},
		{
			MethodName: "GetImagesByCar",
			Handler:    _CrudsService_GetImagesByCar_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _CrudsService_DeleteImage_Handler,
		},
		{
			MethodName: "DeleteImagesByCarId",
			Handler:    _CrudsService_DeleteImagesByCarId_Handler,
		},
		{
			MethodName: "GetImageByID",
			Handler:    _CrudsService_GetImageByID_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _CrudsService_CreateComment_Handler,
		},
		{
			MethodName: "GetCommentsByCar",
			Handler:    _CrudsService_GetCommentsByCar_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _CrudsService_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CrudsService_DeleteComment_Handler,
		},
		{
			MethodName: "DeleteCommentsByCarId",
			Handler:    _CrudsService_DeleteCommentsByCarId_Handler,
		},
		{
			MethodName: "CheckCommentOwnership",
			Handler:    _CrudsService_CheckCommentOwnership_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cruds/cruds.proto",
}
